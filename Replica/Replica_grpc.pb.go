// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Replica

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicaServiceClient is the client API for ReplicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaServiceClient interface {
	CheckStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CreateNewReplica(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ReplicaInfo, error)
	WriteToLog(ctx context.Context, in *Auction, opts ...grpc.CallOption) (*Ack, error)
	Election(ctx context.Context, in *ElectionMessage, opts ...grpc.CallOption) (*Answer, error)
	KillPrimary(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Answer, error)
}

type replicaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaServiceClient(cc grpc.ClientConnInterface) ReplicaServiceClient {
	return &replicaServiceClient{cc}
}

func (c *replicaServiceClient) CheckStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/Replica.ReplicaService/CheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) CreateNewReplica(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ReplicaInfo, error) {
	out := new(ReplicaInfo)
	err := c.cc.Invoke(ctx, "/Replica.ReplicaService/CreateNewReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) WriteToLog(ctx context.Context, in *Auction, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/Replica.ReplicaService/WriteToLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) Election(ctx context.Context, in *ElectionMessage, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Replica.ReplicaService/Election", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) KillPrimary(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/Replica.ReplicaService/KillPrimary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaServiceServer is the server API for ReplicaService service.
// All implementations must embed UnimplementedReplicaServiceServer
// for forward compatibility
type ReplicaServiceServer interface {
	CheckStatus(context.Context, *GetStatusRequest) (*StatusResponse, error)
	CreateNewReplica(context.Context, *EmptyRequest) (*ReplicaInfo, error)
	WriteToLog(context.Context, *Auction) (*Ack, error)
	Election(context.Context, *ElectionMessage) (*Answer, error)
	KillPrimary(context.Context, *EmptyRequest) (*Answer, error)
	mustEmbedUnimplementedReplicaServiceServer()
}

// UnimplementedReplicaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaServiceServer struct {
}

func (UnimplementedReplicaServiceServer) CheckStatus(context.Context, *GetStatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedReplicaServiceServer) CreateNewReplica(context.Context, *EmptyRequest) (*ReplicaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewReplica not implemented")
}
func (UnimplementedReplicaServiceServer) WriteToLog(context.Context, *Auction) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToLog not implemented")
}
func (UnimplementedReplicaServiceServer) Election(context.Context, *ElectionMessage) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (UnimplementedReplicaServiceServer) KillPrimary(context.Context, *EmptyRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillPrimary not implemented")
}
func (UnimplementedReplicaServiceServer) mustEmbedUnimplementedReplicaServiceServer() {}

// UnsafeReplicaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaServiceServer will
// result in compilation errors.
type UnsafeReplicaServiceServer interface {
	mustEmbedUnimplementedReplicaServiceServer()
}

func RegisterReplicaServiceServer(s grpc.ServiceRegistrar, srv ReplicaServiceServer) {
	s.RegisterService(&ReplicaService_ServiceDesc, srv)
}

func _ReplicaService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replica.ReplicaService/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).CheckStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_CreateNewReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).CreateNewReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replica.ReplicaService/CreateNewReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).CreateNewReplica(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_WriteToLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).WriteToLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replica.ReplicaService/WriteToLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).WriteToLog(ctx, req.(*Auction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_Election_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).Election(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replica.ReplicaService/Election",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).Election(ctx, req.(*ElectionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_KillPrimary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).KillPrimary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replica.ReplicaService/KillPrimary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).KillPrimary(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicaService_ServiceDesc is the grpc.ServiceDesc for ReplicaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Replica.ReplicaService",
	HandlerType: (*ReplicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckStatus",
			Handler:    _ReplicaService_CheckStatus_Handler,
		},
		{
			MethodName: "CreateNewReplica",
			Handler:    _ReplicaService_CreateNewReplica_Handler,
		},
		{
			MethodName: "WriteToLog",
			Handler:    _ReplicaService_WriteToLog_Handler,
		},
		{
			MethodName: "Election",
			Handler:    _ReplicaService_Election_Handler,
		},
		{
			MethodName: "KillPrimary",
			Handler:    _ReplicaService_KillPrimary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Replica/Replica.proto",
}
