// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package FrontEnd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontEndServiceClient is the client API for FrontEndService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontEndServiceClient interface {
	AddBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	GetResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type frontEndServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontEndServiceClient(cc grpc.ClientConnInterface) FrontEndServiceClient {
	return &frontEndServiceClient{cc}
}

func (c *frontEndServiceClient) AddBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/FrontEnd.FrontEndService/AddBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontEndServiceClient) GetResult(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/FrontEnd.FrontEndService/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontEndServiceServer is the server API for FrontEndService service.
// All implementations must embed UnimplementedFrontEndServiceServer
// for forward compatibility
type FrontEndServiceServer interface {
	AddBid(context.Context, *BidRequest) (*BidResponse, error)
	GetResult(context.Context, *ResultRequest) (*ResultResponse, error)
	mustEmbedUnimplementedFrontEndServiceServer()
}

// UnimplementedFrontEndServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrontEndServiceServer struct {
}

func (UnimplementedFrontEndServiceServer) AddBid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBid not implemented")
}
func (UnimplementedFrontEndServiceServer) GetResult(context.Context, *ResultRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedFrontEndServiceServer) mustEmbedUnimplementedFrontEndServiceServer() {}

// UnsafeFrontEndServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontEndServiceServer will
// result in compilation errors.
type UnsafeFrontEndServiceServer interface {
	mustEmbedUnimplementedFrontEndServiceServer()
}

func RegisterFrontEndServiceServer(s grpc.ServiceRegistrar, srv FrontEndServiceServer) {
	s.RegisterService(&FrontEndService_ServiceDesc, srv)
}

func _FrontEndService_AddBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontEndServiceServer).AddBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FrontEnd.FrontEndService/AddBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontEndServiceServer).AddBid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontEndService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontEndServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FrontEnd.FrontEndService/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontEndServiceServer).GetResult(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontEndService_ServiceDesc is the grpc.ServiceDesc for FrontEndService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontEndService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FrontEnd.FrontEndService",
	HandlerType: (*FrontEndServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBid",
			Handler:    _FrontEndService_AddBid_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _FrontEndService_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FrontEnd/FrontEnd.proto",
}
